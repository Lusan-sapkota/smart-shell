{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Smart-Shell Documentation","text":"<p>Welcome to the official documentation for Smart-Shell!</p> <p></p> <p> </p> <p>Smart-Shell is in active development.</p> <p>Smart-Shell is an intelligent terminal assistant that converts natural language into executable Bash/Zsh commands using Google's Gemini AI models.</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<ul> <li>One-Command Installation: <pre><code>curl -sSL https://raw.githubusercontent.com/Lusan-sapkota/smart-shell/main/install.sh | bash\n</code></pre></li> </ul> <p>The installation script automatically:   - Installs all required dependencies   - Sets up Smart-Shell with pipx   - Creates desktop entries and command completion   - Runs the setup wizard for API key configuration</p> <ul> <li> <p>Start Using Smart-Shell: <pre><code>smart-shell\n</code></pre></p> </li> <li> <p>For detailed installation options and troubleshooting, see Installation.</p> </li> <li>For development setup, see Development.</li> </ul>"},{"location":"#documentation-navigation","title":"\ud83d\udcda Documentation Navigation","text":"<ul> <li>Features</li> <li>Installation</li> <li>Usage</li> <li>Safety</li> <li>Development</li> <li>API Reference</li> <li>Changelog</li> <li>License</li> <li>Author</li> <li>Contributing</li> <li>FAQ</li> </ul> <p>For more, visit the GitHub repository.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to Smart-Shell will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#100-2025-06-30","title":"[1.0.0] - 2025-06-30","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Interactive REPL mode that continues until user explicitly exits</li> <li>Command history tracking and viewing</li> <li>Special commands in interactive mode (!history, !clear, !help, !model)</li> <li>Automatic error recovery for common issues</li> <li>Support for sudo commands with password caching and secure handling</li> <li>Command execution via temporary script files for better security</li> <li>Desktop entry for GUI launchers</li> <li>Support for multiple shells (bash, zsh)</li> <li>Comprehensive safety checks for commands, including command-specific risk assessment</li> <li>Auto-installation of missing dependencies</li> <li>Better error handling and recovery</li> <li>Command-specific risk assessment</li> <li>Enhanced API key flexibility with support for any Gemini-compatible API key</li> <li>Improved model validation with graceful fallback to default model</li> <li>New <code>--list-models</code> flag to display available AI models</li> <li>Special command <code>!models</code> in interactive mode to list models</li> <li>Support for multi-shell environments (bash, zsh)</li> <li>Command history persistence across sessions</li> <li>Auto-completion for file paths in prompts</li> <li>Dry run mode to preview commands without execution</li> <li>Enhanced documentation with API key and model information</li> <li>Tab completion for commands and options</li> <li>Desktop integration</li> <li>Installation script with multiple installation options</li> <li>Comprehensive documentation</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Improved installation script with error handling</li> <li>Enhanced safety checks with detailed analysis</li> <li>Better terminal output formatting</li> <li>Prioritize environment variables for API key storage</li> <li>Updated command-line interface with more options</li> <li>Improved safety checks with more detailed analysis</li> <li>Enhanced error recovery for common issues</li> <li>Better formatting of command output</li> <li>Updated model names to gemini-2.5-pro, gemini-2.5-flash, and gemini-2.0-pro</li> <li>Improved API wrapper with better error handling</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Invalid escape sequence in ASCII art banner</li> <li>Handling of sudo password prompts</li> <li>Path issues in command execution</li> <li>Issue with API key validation</li> <li>Command history not saving in some cases</li> <li>Error handling for network connectivity issues</li> <li>Issues with model selection and fallback</li> <li>Error handling for invalid API keys</li> </ul>"},{"location":"DEVELOPMENT/","title":"Smart-Shell Development Guide","text":"<p>This document provides guidelines for developers who want to contribute to or modify the Smart-Shell project.</p>"},{"location":"DEVELOPMENT/#manual-installation-for-developers","title":"Manual Installation for Developers","text":""},{"location":"DEVELOPMENT/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip (Python package installer)</li> <li>git (for cloning the repository)</li> </ul>"},{"location":"DEVELOPMENT/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<pre><code>git clone https://github.com/Lusan-sapkota/smart-shell.git\ncd smart-shell\n</code></pre>"},{"location":"DEVELOPMENT/#step-2-set-up-development-environment","title":"Step 2: Set Up Development Environment","text":"<p>Choose one of the following methods:</p>"},{"location":"DEVELOPMENT/#method-1-virtual-environment-recommended-for-development","title":"Method 1: Virtual Environment (Recommended for Development)","text":"<pre><code># Create a virtual environment\npython3 -m venv venv\n\n# Activate the virtual environment\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install in development mode\npip install -e .\n</code></pre>"},{"location":"DEVELOPMENT/#method-2-user-installation","title":"Method 2: User Installation","text":"<pre><code># Install for current user\npip install --user -e .\n</code></pre>"},{"location":"DEVELOPMENT/#method-3-system-wide-installation","title":"Method 3: System-wide Installation","text":"<pre><code># Install system-wide (requires admin/sudo)\nsudo pip install -e .\n</code></pre>"},{"location":"DEVELOPMENT/#step-3-set-up-your-api-key","title":"Step 3: Set Up Your API Key","text":"<p>You'll need a Google Gemini API key to use Smart-Shell:</p> <ol> <li>Get your API key from Google AI Studio</li> <li>Set it as an environment variable (recommended):    <pre><code>export SMART_SHELL_API_KEY=your-api-key-here\n</code></pre></li> </ol> <p>Or configure it using the setup command:    <pre><code>smart-shell setup\n</code></pre></p>"},{"location":"DEVELOPMENT/#step-4-verify-installation","title":"Step 4: Verify Installation","text":"<p>Test your installation by running:</p> <pre><code># Simple test\nsmart-shell run \"list files in current directory\" --dry-run\n\n# Run in interactive mode\nsmart-shell\n</code></pre>"},{"location":"DEVELOPMENT/#development-environment","title":"Development Environment","text":"<p>After installing, set up your development environment:</p> <ol> <li> <p>Install development dependencies:    <pre><code>pip install pytest black flake8\n</code></pre></p> </li> <li> <p>Run tests:    <pre><code>pytest\n</code></pre></p> </li> <li> <p>Format code before committing:    <pre><code>black .\nflake8\n</code></pre></p> </li> </ol>"},{"location":"DEVELOPMENT/#core-components","title":"Core Components","text":""},{"location":"DEVELOPMENT/#main-mainpy","title":"Main (main.py)","text":"<p>The main module provides the command-line interface using Click. It handles: - Command parsing and execution - Interactive mode - History tracking - Configuration management</p>"},{"location":"DEVELOPMENT/#shell-builder-shell_builderpy","title":"Shell Builder (shell_builder.py)","text":"<p>This module is responsible for: - Generating shell commands from natural language - Managing model selection - Formatting output</p>"},{"location":"DEVELOPMENT/#ai-wrapper-ai_wrapperpy","title":"AI Wrapper (ai_wrapper.py)","text":"<p>The AI wrapper provides a unified interface for interacting with AI models: - Handles API authentication - Manages model selection and fallbacks - Processes prompts and responses - Uses the google-genai package to interact with Google's Gemini models</p>"},{"location":"DEVELOPMENT/#safety-safetypy","title":"Safety (safety.py)","text":"<p>The safety module implements checks to prevent dangerous commands: - Pattern matching for risky commands - Path validation - Risk assessment</p>"},{"location":"DEVELOPMENT/#config-configpy","title":"Config (config.py)","text":"<p>Handles configuration management: - Loading/saving configuration - API key management - User preferences</p>"},{"location":"DEVELOPMENT/#api-key-and-model-support","title":"API Key and Model Support","text":"<p>Smart-Shell is designed to work with Google Gemini models but supports any valid Gemini-compatible API key. This allows developers to use their own Google Cloud or AI Studio API credentials.</p>"},{"location":"DEVELOPMENT/#api-key-management","title":"API Key Management","text":"<p>API keys can be provided in two ways: 1. Environment variable: <code>SMART_SHELL_API_KEY</code> (recommended for security) 2. Config file: <code>~/.config/smart-shell/config.json</code></p> <p>The environment variable takes precedence over the config file.</p>"},{"location":"DEVELOPMENT/#model-support","title":"Model Support","text":"<p>Smart-Shell supports multiple Gemini models: - <code>gemini-2.5-flash</code> (default): Fast, capable model for most use cases - <code>gemini-2.5-pro</code>: More advanced reasoning, but may be slower or have stricter limits - <code>gemini-2.0-pro</code>: Legacy model for compatibility</p> <p>The model validation system in <code>shell_builder.py</code> ensures that: 1. If an invalid model is specified, it falls back to the default model 2. Users are informed when a fallback occurs 3. The system can be extended to support new models as they become available</p>"},{"location":"DEVELOPMENT/#adding-support-for-new-models","title":"Adding Support for New Models","text":"<p>To add support for a new model: 1. Add the model name to the <code>SUPPORTED_MODELS</code> list in <code>shell_builder.py</code> 2. Update the model information in <code>display_models()</code> in <code>main.py</code> 3. Test the model with various prompts to ensure compatibility</p>"},{"location":"DEVELOPMENT/#adding-new-features","title":"Adding New Features","text":"<p>When adding new features:</p> <ol> <li> <p>Create a branch for your feature:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Write tests for your feature in <code>test_smart_shell.py</code></p> </li> <li> <p>Implement your feature</p> </li> <li> <p>Run tests:    <pre><code>pytest\n</code></pre></p> </li> <li> <p>Format your code:    <pre><code>black .\nflake8\n</code></pre></p> </li> <li> <p>Update documentation as needed</p> </li> <li> <p>Submit a pull request</p> </li> </ol>"},{"location":"DEVELOPMENT/#package-dependencies","title":"Package Dependencies","text":"<p>Smart-Shell requires the following main dependencies:</p> <ul> <li><code>google-genai&gt;=1.0.0</code>: Google's Generative AI Python SDK</li> <li><code>rich</code>: For enhanced terminal output</li> <li><code>click</code>: For command-line interface</li> <li><code>requests</code>: For API communication</li> </ul> <p>Make sure to keep <code>requirements.txt</code> and <code>pyproject.toml</code> in sync when adding new dependencies.</p>"},{"location":"DEVELOPMENT/#troubleshooting-common-development-issues","title":"Troubleshooting Common Development Issues","text":""},{"location":"DEVELOPMENT/#api-connection-issues","title":"API Connection Issues","text":"<p>If you're having trouble connecting to the Gemini API: - Check that your API key is valid and has appropriate permissions - Verify your internet connection - Ensure the Google Gemini API is available in your region</p>"},{"location":"DEVELOPMENT/#package-installation-problems","title":"Package Installation Problems","text":"<p>If you encounter issues installing Smart-Shell: - Ensure your Python version is 3.8 or higher - Try installing with <code>--break-system-packages</code> if using Python 3.11+ - Check that all dependencies are available in your environment</p>"},{"location":"DEVELOPMENT/#import-errors","title":"Import Errors","text":"<p>If you see import errors when running Smart-Shell: - Verify that you've installed the package in development mode (<code>pip install -e .</code>) - Make sure your virtual environment is activated - Check that all dependencies are installed</p>"},{"location":"DEVELOPMENT/#safety-guidelines","title":"Safety Guidelines","text":"<p>When modifying the safety system:</p> <ol> <li>Never disable safety checks without careful consideration</li> <li>Add tests for new safety rules</li> <li>Consider edge cases and potential bypasses</li> <li>Document changes in <code>docs/SAFETY.md</code></li> </ol>"},{"location":"DEVELOPMENT/#release-process","title":"Release Process","text":"<ol> <li>Update version number in <code>setup.py</code> and <code>pyproject.toml</code></li> <li>Update <code>CHANGELOG.md</code> with changes</li> <li>Run full test suite</li> <li>Create a release tag</li> <li>Build and publish package</li> </ol>"},{"location":"DEVELOPMENT/#extending-to-other-ai-providers","title":"Extending to Other AI Providers","text":"<p>While Smart-Shell is currently optimized for Google Gemini models, it's designed to be extensible. To add support for other AI providers:</p> <ol> <li>Create a new wrapper class in <code>ai_wrapper.py</code> that implements the same interface as <code>GeminiWrapper</code></li> <li>Update the <code>get_wrapper()</code> function to detect and use the appropriate wrapper</li> <li>Add configuration options for the new provider</li> <li>Update documentation and help text</li> </ol> <p>Remember that different AI models may have different capabilities and limitations, so thorough testing is essential.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#main-modules","title":"Main Modules","text":"<ul> <li><code>smart_shell.main</code>: Entry point, CLI logic, interactive mode, and special commands</li> <li><code>smart_shell.ai_wrapper</code>: Handles AI model communication (Gemini)</li> <li><code>smart_shell.safety</code>: Safety checks, command validation, and user confirmation logic</li> <li><code>smart_shell.config</code>: Configuration, API key management, and model selection</li> <li><code>smart_shell.shell_builder</code>: Bash/Zsh command construction and banner display</li> <li><code>smart_shell.utils</code>: Utility functions (execution, logging, sudo, OS detection)</li> <li><code>smart_shell.setup_logic</code>: Setup and installation logic</li> </ul>"},{"location":"api/#key-classes-functions","title":"Key Classes &amp; Functions","text":""},{"location":"api/#ai_wrapperpy","title":"ai_wrapper.py","text":"<ul> <li><code>get_wrapper(api_key)</code>: Returns an AIWrapper instance for Gemini</li> <li><code>AIWrapper.list_available_models()</code>: List supported Gemini models</li> <li><code>AIWrapper.generate_command(prompt, model)</code>: Generate Bash/Zsh command from prompt</li> </ul>"},{"location":"api/#safetypy","title":"safety.py","text":"<ul> <li><code>check_command_safety(command)</code>: Returns safety level and reason for a command</li> <li>(Class-based API is not used; safety is function-based)</li> </ul>"},{"location":"api/#configpy","title":"config.py","text":"<ul> <li><code>load_config()</code>: Loads config file</li> <li><code>save_model(model)</code>: Saves selected model</li> <li><code>get_current_model()</code>: Gets current model</li> <li><code>ENV_API_KEY</code>: Environment variable for API key</li> </ul>"},{"location":"api/#shell_builderpy","title":"shell_builder.py","text":"<ul> <li><code>generate_command_plan(prompt, api_key, model, os_info)</code>: Returns a list of command(s) for a prompt</li> <li><code>display_banner()</code>: Prints the Smart-Shell banner</li> <li><code>BANNER</code>: Banner string</li> </ul>"},{"location":"api/#utilspy","title":"utils.py","text":"<ul> <li><code>execute_command(command)</code>: Runs a shell command</li> <li><code>print_plan_preview(plan, safety_results)</code>: Shows command plan and safety</li> <li><code>reset_sudo_password()</code>: Clears cached sudo password</li> <li><code>log_error(error)</code>: Logs errors</li> <li><code>get_os_info()</code>: Returns OS info</li> <li><code>detect_shell()</code>: Detects Bash or Zsh</li> </ul>"},{"location":"api/#setup_logicpy","title":"setup_logic.py","text":"<ul> <li><code>setup_config()</code>: Runs interactive setup</li> </ul> <p>For more, see the source code and inline docstrings. All modules are designed for Bash and Zsh compatibility, and safety checks always prompt for confirmation on high-risk commands.</p>"},{"location":"author/","title":"Author","text":"<p>Lusan Sapkota</p> <ul> <li>Personal Website</li> <li>GitHub</li> <li>Twitter</li> </ul> <p>For questions, suggestions, or collaboration, feel free to reach out!</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to Smart-Shell!</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<ul> <li>Fork the repository</li> <li>Create a new branch for your feature or bugfix</li> <li>Make your changes and add tests if applicable</li> <li>Submit a pull request with a clear description</li> </ul>"},{"location":"contributing/#guidelines","title":"Guidelines","text":"<ul> <li>Follow the existing code style</li> <li>Write clear commit messages</li> <li>Document new features in the docs</li> <li>Ensure all tests pass before submitting</li> </ul>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":"<ul> <li>Use GitHub Issues for bugs and feature requests</li> <li>Provide as much detail as possible</li> </ul> <p>We welcome all contributions!</p>"},{"location":"development/","title":"Development","text":"<p>For developers and contributors. See the full Development Guide for details.</p>"},{"location":"development/#manual-installation","title":"Manual Installation","text":"<ul> <li>Clone the repo:   <pre><code>git clone https://github.com/Lusan-sapkota/smart-shell.git\ncd smart-shell\n</code></pre></li> <li>Set up a virtual environment:   <pre><code>python3 -m venv venv\nsource venv/bin/activate\npip install -e .\n</code></pre></li> <li>Set your API key:   <pre><code>export SMART_SHELL_API_KEY=your-api-key-here\n</code></pre></li> </ul>"},{"location":"development/#contributing","title":"Contributing","text":"<ul> <li>Please read CONTRIBUTING for guidelines.</li> <li>Issues and PRs are welcome!</li> </ul>"},{"location":"development/#project-structure","title":"Project Structure","text":"<ul> <li><code>smart_shell/</code>: Main source code</li> <li><code>docs/</code>: Documentation</li> <li><code>examples/</code>: Usage examples</li> <li><code>install.sh</code>: Installer script</li> <li><code>requirements.txt</code>, <code>pyproject.toml</code>: Dependencies</li> </ul> <p>See API Reference for code-level documentation.</p>"},{"location":"faq/","title":"FAQ","text":"<p>Q: What is Smart-Shell? A: An AI-powered terminal assistant that converts natural language to Bash/Zsh commands using Gemini models.</p> <p>Q: Is it safe to use? A: Yes, Smart-Shell includes robust safety checks to prevent dangerous commands.</p> <p>Q: How do I install it? A: Use the quick install command or see Installation.</p> <p>Q: How do I set my API key? A: Run <code>smart-shell setup</code> or set the <code>SMART_SHELL_API_KEY</code> environment variable.</p> <p>Q: Can I contribute? A: Absolutely! See Contributing.</p> <p>Q: Where can I get help? A: Open an issue on GitHub or check the Development Guide.</p>"},{"location":"features/","title":"Features","text":""},{"location":"features/#smart-shell-offers-a-rich-set-of-features-to-make-your-terminal-experience-smarter-and-safer","title":"Smart-Shell offers a rich set of features to make your terminal experience smarter and safer:","text":"<ul> <li> <p>\ud83e\udde0 Natural Language to Command   Convert plain English into valid Bash/Zsh commands instantly.</p> </li> <li> <p>\ud83d\udc1a Shell Auto-Detection   Automatically detects and supports both Bash and Zsh environments.</p> </li> <li> <p>\ud83d\udcac Interactive Mode with Command History   Rich REPL interface with support for special commands like: <code>!help</code>, <code>!docs</code>, <code>!models</code>, <code>!history</code>, <code>!clear</code>, <code>!redo</code>, <code>!last</code>, <code>!creator</code>, <code>!forget-sudo</code>, <code>!update</code>, <code>!errors</code>, <code>!web</code>, and more.</p> </li> <li> <p>\ud83d\udee1\ufe0f Built-in Safety System   Analyzes each command and classifies it into three risk levels - Reason also provided:</p> </li> <li>\u2705 Safe \u2013 Executed automatically.</li> <li>\u26a0\ufe0f Medium \u2013 Requires manual confirmation (yes/no).</li> <li> <p>\u274c High \u2013 Requires manual confirmation (yes/no).   This ensures dangerous or potentially destructive commands are never run blindly.</p> </li> <li> <p>\ud83e\udd16 AI-Powered Command Planning   Generates and refines shell commands using Google Gemini models.</p> </li> <li> <p>\ud83d\udd00 Multi-Model Support   Easily switch between Gemini Pro, Flash, and Legacy models as needed.</p> </li> <li> <p>\ud83e\uddea Dry-Run Mode   Preview the exact command before execution for extra safety and transparency.</p> </li> <li> <p>\ud83d\udcdf Standard CLI Commands   Includes <code>--help</code>, <code>--version</code>, and other CLI flags for quick access.</p> </li> <li> <p>\ud83d\udda5\ufe0f Desktop Integration   Comes with a <code>.desktop</code> entry \u2014 launch directly from your system's Application Menu.</p> </li> <li> <p>\u2328\ufe0f Tab Completion   Supports intelligent tab completion for both Bash and Zsh shells.</p> </li> <li> <p>\ud83d\udd10 Simple Setup   Easy configuration of your API key and sudo password during first run.</p> </li> <li> <p>\ud83c\udf10 Web Search Integration   When enabled, Smart-Shell performs relevant web searches in real-time to enhance command accuracy.   AI combines local knowledge with live web results to refine its suggestions \u2014 giving you smarter, context-aware commands.   You can toggle web search anytime using the <code>!web</code> command.</p> </li> <li> <p>\u26a1 Modern CLI Experience   A clean and user-friendly terminal UI with colorful output and rich formatting.</p> </li> <li> <p>\ud83d\udee0\ufe0f Open Source &amp; Extensible   Easily extend functionality or contribute \u2014 fully open and developer-friendly.</p> </li> <li> <p>\ud83d\udce6 Reliable Installation with pipx   Install and manage Smart-Shell using <code>pipx</code> for an isolated and reliable setup, adhering to modern Linux standards (PEP 668).</p> </li> </ul> <p>For a full list of commands and usage, see the Installation and Usage docs.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#quick-installation-recommended","title":"Quick Installation (Recommended)","text":"<p>Smart-Shell is designed for easy installation with a single command that handles all dependencies and environment setup automatically.</p> <p>Quick install (recommended for most users):</p> <pre><code>curl -sSL https://raw.githubusercontent.com/Lusan-sapkota/smart-shell/main/install.sh | bash\n</code></pre> <p>The installation script will:</p> <ol> <li>Check and install all required dependencies</li> <li>Install Smart-Shell using pipx (for better isolation)</li> <li>Create desktop entries for easy access</li> <li>Set up command completion for Bash and Zsh</li> <li>Apply fixes for common Python module path issues</li> <li>Automatically run the setup wizard to configure your API key</li> </ol> <p>If you're behind a corporate firewall or have restricted internet access, you might need to manually install dependencies first: <pre><code>pip install --user google-genai rich click pyyaml requests google-api-core\n</code></pre></p> <p>After installation, use Smart-Shell from any terminal:</p> <pre><code>smart-shell\n</code></pre>"},{"location":"installation/#cli-commands","title":"CLI Commands","text":"<ul> <li><code>smart-shell</code> \u2014 Start Smart-Shell in interactive mode</li> <li><code>smart-shell run &lt;prompt&gt;</code> \u2014 Convert natural language to Bash/Zsh commands</li> <li><code>smart-shell --interactive</code> or <code>-i</code> \u2014 Start interactive mode explicitly</li> <li><code>smart-shell setup</code> \u2014 Configure API key and settings</li> <li><code>smart-shell models</code> \u2014 List available AI models</li> <li><code>smart-shell history</code> \u2014 Show command history</li> <li><code>smart-shell --help</code> or <code>smart-shell help</code> \u2014 Show CLI help</li> <li><code>smart-shell --version</code> or <code>smart-shell version</code> \u2014 Show version information</li> <li><code>smart-shell --dry-run</code> or <code>-d</code> \u2014 Show command without executing</li> </ul>"},{"location":"installation/#manual-installation-options","title":"Manual Installation Options","text":"<p>The install script offers three installation methods:</p> <ol> <li>System-wide installation (requires sudo)</li> <li>Installs Smart-Shell for all users on the system</li> <li> <p>Requires administrator privileges</p> </li> <li> <p>User installation (recommended)</p> </li> <li>Uses pipx for isolated installation in your user directory</li> <li>No administrator privileges required</li> <li> <p>Automatically installed if pipx is not found</p> </li> <li> <p>Virtual environment (for development)</p> </li> <li>Creates a dedicated virtual environment</li> <li>Useful for development or testing</li> </ol> <p>For development setup, see Development.</p> <p>For troubleshooting and more, see the FAQ.</p>"},{"location":"installation/#dependencies","title":"Dependencies","text":"<p>Smart-Shell requires the following Python packages:</p> <ul> <li><code>google-genai</code> - Google's Gemini AI SDK</li> <li><code>rich</code> - For beautiful terminal formatting</li> <li><code>click</code> - For command-line interface</li> <li><code>pyyaml</code> - For configuration management</li> <li><code>requests</code> - For API communication</li> <li><code>google-api-core</code> - Core Google API functionality</li> </ul> <p>The installation script handles all these dependencies automatically.</p>"},{"location":"safety/","title":"Safety","text":"<p>Smart-Shell includes a comprehensive safety system to protect users from potentially harmful commands.</p>"},{"location":"safety/#safety-levels","title":"Safety Levels","text":"<ul> <li>Safe \ud83d\udfe2: Commands that are considered safe to run</li> <li>Warning \ud83d\udfe1: Commands that might have unintended consequences (requires confirmation)</li> <li>Blocked \ud83d\udd34: Commands that are potentially harmful (require explicit user confirmation before execution)</li> </ul>"},{"location":"safety/#safety-checks","title":"Safety Checks","text":"<ul> <li>Blocked Commands: Explicitly identifies dangerous commands (e.g., <code>rm -rf /</code>, fork bombs, disk formatting) and prompts the user for confirmation before execution. If the user confirms, the command will be executed.</li> <li>Pattern Matching: Uses regex to identify risky command patterns (e.g., <code>sudo</code>, <code>rm -rf</code>)</li> <li>Path Analysis: Detects operations on sensitive system paths (e.g., <code>/etc/passwd</code>)</li> </ul> <p>Note: Even high-risk (\"blocked\") commands can be executed if the user explicitly confirms when prompted. This ensures user control while maintaining safety.</p> <p>For more details, see the Safety System Documentation.</p>"},{"location":"usage/","title":"Usage Guide: Smart-Shell","text":"<p>This guide covers all special commands, system-level commands, and usage patterns for Smart-Shell, including both CLI and interactive modes.</p>"},{"location":"usage/#quick-start","title":"Quick Start","text":"<ul> <li>Interactive Mode: <pre><code>smart-shell --interactive\n</code></pre></li> <li>One-off Command: <pre><code>smart-shell run \"list all PDF files in the current directory\"\n</code></pre></li> <li>Help: <pre><code>smart-shell --help\n</code></pre></li> </ul>"},{"location":"usage/#special-commands-interactive-mode","title":"Special Commands (Interactive Mode)","text":"<p>Type these at the Smart-Shell prompt (not in your system shell):</p> Command Description <code>!help</code> Show help message <code>!history</code> Show command history <code>!last</code> Show the last generated command <code>!redo</code> Re-execute the last command <code>!clear</code> Clear the screen <code>!models</code> List available AI models <code>!models standard</code> List only free standard models <code>!models premium</code> List only paid premium models <code>!models &lt;n&gt;</code> List models with a limit of n <code>!models web</code> Show additional model info from web <code>!model &lt;model-name&gt;</code> Switch to a different AI model <code>!web</code> Toggle web search for commands <code>!update</code> Check for updates and install <code>!errors</code> Show the error log <code>!forget-sudo</code> Clear the session sudo password <code>!creator</code> Show information about the creator <code>!docs</code> Show link to documentation <ul> <li>Exit: Type <code>exit</code>, <code>quit</code>, <code>bye</code>, <code>q</code>, or press Ctrl+C.</li> </ul>"},{"location":"usage/#system-level-cli-commands","title":"System-Level CLI Commands","text":"<p>Run these in your system shell:</p> Command Description <code>smart-shell run &lt;prompt&gt;</code> Run a one-off natural language command <code>smart-shell --interactive</code> Start interactive mode <code>smart-shell setup</code> Configure API key and settings <code>smart-shell models</code> List available models <code>smart-shell history</code> Show command history <code>smart-shell --help</code> or <code>-h</code> Show CLI help <code>smart-shell --version</code> Show version information"},{"location":"usage/#usage-patterns","title":"Usage Patterns","text":"<ul> <li>Natural Language:</li> <li>Type requests like \"Find large files over 100MB\" or \"Create a backup of my project folder\".</li> <li>Model Selection:</li> <li>Use <code>--model &lt;model-name&gt;</code> in CLI or <code>!model &lt;model-name&gt;</code> in interactive mode.</li> <li>Web Search:</li> <li>Toggle with <code>!web</code> in interactive mode.</li> <li>Safety:</li> <li>Commands are checked for safety before execution. High-risk commands require explicit confirmation.</li> </ul>"},{"location":"usage/#safety-system","title":"Safety System","text":"<ul> <li>\ud83d\udfe2 Safe: Command is safe to run.</li> <li>\ud83d\udfe1 Warning: Might have unintended consequences (requires confirmation).</li> <li>\ud83d\udd34 Blocked: Potentially harmful (requires explicit confirmation; will be executed if you confirm).</li> </ul>"},{"location":"usage/#configuration","title":"Configuration","text":"<ul> <li>To reconfigure, exit Smart-Shell and run:   <pre><code>smart-shell setup\n</code></pre></li> </ul>"},{"location":"usage/#documentation","title":"Documentation","text":"<ul> <li>Full docs: https://lusan-sapkota.github.io/smart-shell/</li> </ul>"},{"location":"usage/#notes","title":"Notes","text":"<ul> <li>Premium models may incur costs or have stricter rate limits.</li> <li>All commands and features are available in both Bash and Zsh environments.</li> <li>For troubleshooting, use <code>!errors</code> or check the error log.</li> </ul> <p>For more details, see the full documentation or use <code>!help</code> in interactive mode.</p>"}]}