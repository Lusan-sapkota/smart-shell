{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Smart-Shell Documentation","text":"<p>Welcome to the official documentation for Smart-Shell!</p> <p></p> <p> </p> <p>Smart-Shell is in active development.</p> <p>Smart-Shell is an intelligent terminal assistant that converts natural language into executable Bash/Zsh commands using Google's Gemini AI models.</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<ul> <li>Quick Install: <pre><code>curl -sSL https://raw.githubusercontent.com/Lusan-sapkota/smart-shell/main/install.sh | bash\n</code></pre></li> <li>For manual installation and development, see Development.</li> </ul>"},{"location":"#documentation-navigation","title":"\ud83d\udcda Documentation Navigation","text":"<ul> <li>Features</li> <li>Installation</li> <li>Usage</li> <li>Safety</li> <li>Development</li> <li>API Reference</li> <li>Changelog</li> <li>License</li> <li>Author</li> <li>Contributing</li> <li>FAQ</li> </ul> <p>For more, visit the GitHub repository.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to Smart-Shell will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#100-2025-06-30","title":"[1.0.0] - 2025-06-30","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Interactive REPL mode that continues until user explicitly exits</li> <li>Command history tracking and viewing</li> <li>Special commands in interactive mode (!history, !clear, !help, !model)</li> <li>Automatic error recovery for common issues</li> <li>Support for sudo commands with password caching and secure handling</li> <li>Command execution via temporary script files for better security</li> <li>Desktop entry for GUI launchers</li> <li>Support for multiple shells (bash, zsh)</li> <li>Comprehensive safety checks for commands, including command-specific risk assessment</li> <li>Auto-installation of missing dependencies</li> <li>Better error handling and recovery</li> <li>Command-specific risk assessment</li> <li>Enhanced API key flexibility with support for any Gemini-compatible API key</li> <li>Improved model validation with graceful fallback to default model</li> <li>New <code>--list-models</code> flag to display available AI models</li> <li>Special command <code>!models</code> in interactive mode to list models</li> <li>Support for multi-shell environments (bash, zsh)</li> <li>Command history persistence across sessions</li> <li>Auto-completion for file paths in prompts</li> <li>Dry run mode to preview commands without execution</li> <li>Enhanced documentation with API key and model information</li> <li>Tab completion for commands and options</li> <li>Desktop integration</li> <li>Installation script with multiple installation options</li> <li>Comprehensive documentation</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Improved installation script with error handling</li> <li>Enhanced safety checks with detailed analysis</li> <li>Better terminal output formatting</li> <li>Prioritize environment variables for API key storage</li> <li>Updated command-line interface with more options</li> <li>Improved safety checks with more detailed analysis</li> <li>Enhanced error recovery for common issues</li> <li>Better formatting of command output</li> <li>Updated model names to gemini-2.5-pro, gemini-2.5-flash, and gemini-2.0-pro</li> <li>Improved API wrapper with better error handling</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Invalid escape sequence in ASCII art banner</li> <li>Handling of sudo password prompts</li> <li>Path issues in command execution</li> <li>Issue with API key validation</li> <li>Command history not saving in some cases</li> <li>Error handling for network connectivity issues</li> <li>Issues with model selection and fallback</li> <li>Error handling for invalid API keys</li> </ul>"},{"location":"DEVELOPMENT/","title":"Smart-Shell Development Guide","text":"<p>This document provides guidelines for developers who want to contribute to or modify the Smart-Shell project.</p>"},{"location":"DEVELOPMENT/#manual-installation-for-developers","title":"Manual Installation for Developers","text":""},{"location":"DEVELOPMENT/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip (Python package installer)</li> <li>git (for cloning the repository)</li> </ul>"},{"location":"DEVELOPMENT/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<pre><code>git clone https://github.com/Lusan-sapkota/smart-shell.git\ncd smart-shell\n</code></pre>"},{"location":"DEVELOPMENT/#step-2-set-up-development-environment","title":"Step 2: Set Up Development Environment","text":"<p>Choose one of the following methods:</p>"},{"location":"DEVELOPMENT/#method-1-virtual-environment-recommended-for-development","title":"Method 1: Virtual Environment (Recommended for Development)","text":"<pre><code># Create a virtual environment\npython3 -m venv venv\n\n# Activate the virtual environment\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install in development mode\npip install -e .\n</code></pre>"},{"location":"DEVELOPMENT/#method-2-user-installation","title":"Method 2: User Installation","text":"<pre><code># Install for current user\npip install --user -e .\n</code></pre>"},{"location":"DEVELOPMENT/#method-3-system-wide-installation","title":"Method 3: System-wide Installation","text":"<pre><code># Install system-wide (requires admin/sudo)\nsudo pip install -e .\n</code></pre>"},{"location":"DEVELOPMENT/#step-3-set-up-your-api-key","title":"Step 3: Set Up Your API Key","text":"<p>You'll need a Google Gemini API key to use Smart-Shell:</p> <ol> <li>Get your API key from Google AI Studio</li> <li>Set it as an environment variable (recommended):    <pre><code>export SMART_SHELL_API_KEY=your-api-key-here\n</code></pre></li> </ol> <p>Or configure it using the setup command:    <pre><code>smart-shell setup\n</code></pre></p>"},{"location":"DEVELOPMENT/#step-4-verify-installation","title":"Step 4: Verify Installation","text":"<p>Test your installation by running:</p> <pre><code># Simple test\nsmart-shell run \"list files in current directory\" --dry-run\n\n# Run in interactive mode\nsmart-shell\n</code></pre>"},{"location":"DEVELOPMENT/#development-environment","title":"Development Environment","text":"<p>After installing, set up your development environment:</p> <ol> <li> <p>Install development dependencies:    <pre><code>pip install pytest black flake8\n</code></pre></p> </li> <li> <p>Run tests:    <pre><code>pytest\n</code></pre></p> </li> <li> <p>Format code before committing:    <pre><code>black .\nflake8\n</code></pre></p> </li> </ol>"},{"location":"DEVELOPMENT/#core-components","title":"Core Components","text":""},{"location":"DEVELOPMENT/#main-mainpy","title":"Main (main.py)","text":"<p>The main module provides the command-line interface using Click. It handles: - Command parsing and execution - Interactive mode - History tracking - Configuration management</p>"},{"location":"DEVELOPMENT/#shell-builder-shell_builderpy","title":"Shell Builder (shell_builder.py)","text":"<p>This module is responsible for: - Generating shell commands from natural language - Managing model selection - Formatting output</p>"},{"location":"DEVELOPMENT/#ai-wrapper-ai_wrapperpy","title":"AI Wrapper (ai_wrapper.py)","text":"<p>The AI wrapper provides a unified interface for interacting with AI models: - Handles API authentication - Manages model selection and fallbacks - Processes prompts and responses - Uses the google-genai package to interact with Google's Gemini models</p>"},{"location":"DEVELOPMENT/#safety-safetypy","title":"Safety (safety.py)","text":"<p>The safety module implements checks to prevent dangerous commands: - Pattern matching for risky commands - Path validation - Risk assessment</p>"},{"location":"DEVELOPMENT/#config-configpy","title":"Config (config.py)","text":"<p>Handles configuration management: - Loading/saving configuration - API key management - User preferences</p>"},{"location":"DEVELOPMENT/#api-key-and-model-support","title":"API Key and Model Support","text":"<p>Smart-Shell is designed to work with Google Gemini models but supports any valid Gemini-compatible API key. This allows developers to use their own Google Cloud or AI Studio API credentials.</p>"},{"location":"DEVELOPMENT/#api-key-management","title":"API Key Management","text":"<p>API keys can be provided in two ways: 1. Environment variable: <code>SMART_SHELL_API_KEY</code> (recommended for security) 2. Config file: <code>~/.config/smart-shell/config.json</code></p> <p>The environment variable takes precedence over the config file.</p>"},{"location":"DEVELOPMENT/#model-support","title":"Model Support","text":"<p>Smart-Shell supports multiple Gemini models: - <code>gemini-2.5-pro</code> (default): Most capable model with advanced reasoning - <code>gemini-2.5-flash</code>: Faster model with good performance - <code>gemini-2.0-pro</code>: Legacy model for compatibility</p> <p>The model validation system in <code>shell_builder.py</code> ensures that: 1. If an invalid model is specified, it falls back to the default model 2. Users are informed when a fallback occurs 3. The system can be extended to support new models as they become available</p>"},{"location":"DEVELOPMENT/#adding-support-for-new-models","title":"Adding Support for New Models","text":"<p>To add support for a new model: 1. Add the model name to the <code>SUPPORTED_MODELS</code> list in <code>shell_builder.py</code> 2. Update the model information in <code>display_models()</code> in <code>main.py</code> 3. Test the model with various prompts to ensure compatibility</p>"},{"location":"DEVELOPMENT/#adding-new-features","title":"Adding New Features","text":"<p>When adding new features:</p> <ol> <li> <p>Create a branch for your feature:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Write tests for your feature in <code>test_smart_shell.py</code></p> </li> <li> <p>Implement your feature</p> </li> <li> <p>Run tests:    <pre><code>pytest\n</code></pre></p> </li> <li> <p>Format your code:    <pre><code>black .\nflake8\n</code></pre></p> </li> <li> <p>Update documentation as needed</p> </li> <li> <p>Submit a pull request</p> </li> </ol>"},{"location":"DEVELOPMENT/#package-dependencies","title":"Package Dependencies","text":"<p>Smart-Shell requires the following main dependencies:</p> <ul> <li><code>google-genai&gt;=1.0.0</code>: Google's Generative AI Python SDK</li> <li><code>rich</code>: For enhanced terminal output</li> <li><code>click</code>: For command-line interface</li> <li><code>requests</code>: For API communication</li> </ul> <p>Make sure to keep <code>requirements.txt</code> and <code>pyproject.toml</code> in sync when adding new dependencies.</p>"},{"location":"DEVELOPMENT/#troubleshooting-common-development-issues","title":"Troubleshooting Common Development Issues","text":""},{"location":"DEVELOPMENT/#api-connection-issues","title":"API Connection Issues","text":"<p>If you're having trouble connecting to the Gemini API: - Check that your API key is valid and has appropriate permissions - Verify your internet connection - Ensure the Google Gemini API is available in your region</p>"},{"location":"DEVELOPMENT/#package-installation-problems","title":"Package Installation Problems","text":"<p>If you encounter issues installing Smart-Shell: - Ensure your Python version is 3.8 or higher - Try installing with <code>--break-system-packages</code> if using Python 3.11+ - Check that all dependencies are available in your environment</p>"},{"location":"DEVELOPMENT/#import-errors","title":"Import Errors","text":"<p>If you see import errors when running Smart-Shell: - Verify that you've installed the package in development mode (<code>pip install -e .</code>) - Make sure your virtual environment is activated - Check that all dependencies are installed</p>"},{"location":"DEVELOPMENT/#safety-guidelines","title":"Safety Guidelines","text":"<p>When modifying the safety system:</p> <ol> <li>Never disable safety checks without careful consideration</li> <li>Add tests for new safety rules</li> <li>Consider edge cases and potential bypasses</li> <li>Document changes in <code>docs/SAFETY.md</code></li> </ol>"},{"location":"DEVELOPMENT/#release-process","title":"Release Process","text":"<ol> <li>Update version number in <code>setup.py</code> and <code>pyproject.toml</code></li> <li>Update <code>CHANGELOG.md</code> with changes</li> <li>Run full test suite</li> <li>Create a release tag</li> <li>Build and publish package</li> </ol>"},{"location":"DEVELOPMENT/#extending-to-other-ai-providers","title":"Extending to Other AI Providers","text":"<p>While Smart-Shell is currently optimized for Google Gemini models, it's designed to be extensible. To add support for other AI providers:</p> <ol> <li>Create a new wrapper class in <code>ai_wrapper.py</code> that implements the same interface as <code>GeminiWrapper</code></li> <li>Update the <code>get_wrapper()</code> function to detect and use the appropriate wrapper</li> <li>Add configuration options for the new provider</li> <li>Update documentation and help text</li> </ol> <p>Remember that different AI models may have different capabilities and limitations, so thorough testing is essential. </p>"},{"location":"SAFETY/","title":"Safety System Documentation","text":"<p>Smart-Shell includes a comprehensive safety system to protect users from potentially harmful commands. This document explains how the safety system works and its components.</p>"},{"location":"SAFETY/#safety-levels","title":"Safety Levels","text":"<p>Commands are classified into three safety levels:</p> <ol> <li>Safe \ud83d\udfe2 - Commands that are considered safe to run</li> <li>Warning \ud83d\udfe1 - Commands that might have unintended consequences (requires confirmation)</li> <li>Blocked \ud83d\udd34 - Commands that are potentially harmful (will not be executed)</li> </ol>"},{"location":"SAFETY/#safety-checks","title":"Safety Checks","text":"<p>The safety system performs several types of checks:</p>"},{"location":"SAFETY/#1-blocked-commands","title":"1. Blocked Commands","text":"<p>Certain commands are explicitly blocked due to their high potential for damage:</p> <pre><code>BLOCKED_COMMANDS = [\n    \"rm -rf /\",\n    \"rm -rf /*\",\n    \"mkfs\",\n    \"&gt; /dev/sda\",\n    \"dd if=/dev/zero of=/dev/sda\",\n    \":(){ :|:&amp; };:\",  # Fork bomb\n    \"chmod -R 777 /\",\n    \"mv /* /dev/null\",\n    # ...and others\n]\n</code></pre>"},{"location":"SAFETY/#2-pattern-matching","title":"2. Pattern Matching","text":"<p>Regular expressions identify potentially risky command patterns:</p> <pre><code>WARNING_PATTERNS = [\n    r\"rm\\s+-rf\\s+.*\",          # Any rm -rf command\n    r\"rm\\s+-r\\s+.*\",           # Any rm -r command\n    r\"sudo\\s+.*\",              # Any sudo command\n    # ...and many others\n]\n</code></pre>"},{"location":"SAFETY/#3-path-analysis","title":"3. Path Analysis","text":"<p>The system checks if commands operate on sensitive system paths:</p> <pre><code>SENSITIVE_PATHS = [\n    \"/boot\",\n    \"/etc/passwd\",\n    \"/etc/shadow\",\n    \"/etc/sudoers\",\n    # ...and many others\n]\n</code></pre>"},{"location":"SAFETY/#4-redirection-analysis","title":"4. Redirection Analysis","text":"<p>Commands that redirect output to sensitive system files are flagged:</p> <pre><code># Patterns for redirections\nredirection_patterns = [\n    r\"&gt;\\s*(/[^\\s;|&gt;&lt;&amp;]+)\",    # &gt; /path\n    r\"&gt;&gt;\\s*(/[^\\s;|&gt;&lt;&amp;]+)\",   # &gt;&gt; /path\n    # ...and others\n]\n</code></pre>"},{"location":"SAFETY/#5-risk-assessment","title":"5. Risk Assessment","text":"<p>Each command undergoes risk assessment to determine its potential impact:</p> <pre><code>def assess_risk(command, matched_part):\n    # High risk commands\n    if re.search(r\"rm\\s+-rf\\s+[^/]+/\\*\", command):\n        return {\n            \"risk_level\": \"high\",\n            \"explanation\": \"This command will recursively delete all files in a directory.\"\n        }\n\n    # Medium risk commands\n    if re.search(r\"sudo\\s+\", command):\n        return {\n            \"risk_level\": \"medium\",\n            \"explanation\": \"This command runs with elevated privileges.\"\n        }\n\n    # ...and other risk assessments\n</code></pre>"},{"location":"SAFETY/#user-confirmation","title":"User Confirmation","text":"<p>Commands that trigger warnings require explicit user confirmation before execution:</p> <pre><code>if safety_result[\"status\"] == \"warning\" and not auto_yes:\n    confirm = Confirm.ask(\"Do you want to proceed?\", default=False)\n    if not confirm:\n        return False\n</code></pre>"},{"location":"SAFETY/#command-editing","title":"Command Editing","text":"<p>If a command is blocked, users can edit it to make it safer:</p> <pre><code>if Prompt.ask(\"Would you like to edit the command?\", choices=[\"y\", \"n\"], default=\"y\") == \"y\":\n    edited_command = Prompt.ask(\"Enter modified command\", default=command)\n    # Re-check safety of edited command\n    safety_result = check_command_safety(edited_command)\n</code></pre>"},{"location":"SAFETY/#secure-execution","title":"Secure Execution","text":"<p>Commands are executed using a secure approach:</p> <ol> <li>Commands are written to temporary script files</li> <li>Proper permissions are set</li> <li>Scripts are executed with <code>shell=False</code> to prevent shell injection</li> <li>Temporary files are cleaned up after execution</li> </ol>"},{"location":"SAFETY/#error-recovery","title":"Error Recovery","text":"<p>The system attempts to recover from common errors:</p> <ol> <li>Missing commands trigger package installation suggestions</li> <li>Permission errors prompt for sudo execution</li> <li>Path issues offer directory creation options</li> </ol>"},{"location":"SAFETY/#extending-the-safety-system","title":"Extending the Safety System","text":"<p>When adding new safety checks:</p> <ol> <li>Consider the risk level and appropriate response</li> <li>Add specific patterns to the appropriate list</li> <li>Update risk assessment logic if needed</li> <li>Document the new check in this file</li> </ol>"},{"location":"SAFETY/#safety-limitations","title":"Safety Limitations","text":"<p>While the safety system is comprehensive, it has limitations:</p> <ol> <li>It cannot catch all possible harmful commands</li> <li>Complex or obfuscated commands may bypass checks</li> <li>New or unusual command patterns may not be recognized</li> </ol> <p>Always review commands before execution, especially when they affect system files or require elevated privileges. </p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#main-modules","title":"Main Modules","text":"<ul> <li><code>smart_shell.main</code>: Entry point and CLI logic</li> <li><code>smart_shell.ai_wrapper</code>: Handles AI model communication</li> <li><code>smart_shell.safety</code>: Safety checks and command validation</li> <li><code>smart_shell.config</code>: Configuration and API key management</li> <li><code>smart_shell.shell_builder</code>: Bash/Zsh command construction</li> <li><code>smart_shell.utils</code>: Utility functions</li> <li><code>smart_shell.setup_logic</code>: Setup and installation logic</li> </ul>"},{"location":"api/#key-classes-functions","title":"Key Classes &amp; Functions","text":""},{"location":"api/#ai_wrapperpy","title":"ai_wrapper.py","text":"<ul> <li><code>AIWrapper</code>: Main class for interacting with Gemini models</li> <li><code>AIWrapper.generate_command(prompt, model)</code>: Generate Bash/Zsh command from prompt</li> </ul>"},{"location":"api/#safetypy","title":"safety.py","text":"<ul> <li><code>SafetyChecker</code>: Class for command safety analysis</li> <li><code>SafetyChecker.check(command)</code>: Returns safety level and reason</li> </ul>"},{"location":"api/#configpy","title":"config.py","text":"<ul> <li><code>ConfigManager</code>: Handles config file and environment variables</li> <li><code>ConfigManager.get_api_key()</code>: Returns API key</li> </ul>"},{"location":"api/#shell_builderpy","title":"shell_builder.py","text":"<ul> <li><code>ShellBuilder</code>: Converts structured command to Bash/Zsh</li> </ul> <p>For more, see the source code and inline docstrings.</p>"},{"location":"author/","title":"Author","text":"<p>Lusan Sapkota</p> <ul> <li>Personal Website</li> <li>GitHub</li> <li>Twitter</li> </ul> <p>For questions, suggestions, or collaboration, feel free to reach out!</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to Smart-Shell!</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<ul> <li>Fork the repository</li> <li>Create a new branch for your feature or bugfix</li> <li>Make your changes and add tests if applicable</li> <li>Submit a pull request with a clear description</li> </ul>"},{"location":"contributing/#guidelines","title":"Guidelines","text":"<ul> <li>Follow the existing code style</li> <li>Write clear commit messages</li> <li>Document new features in the docs</li> <li>Ensure all tests pass before submitting</li> </ul>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":"<ul> <li>Use GitHub Issues for bugs and feature requests</li> <li>Provide as much detail as possible</li> </ul> <p>We welcome all contributions!</p>"},{"location":"development/","title":"Development","text":"<p>For developers and contributors. See the full Development Guide for details.</p>"},{"location":"development/#manual-installation","title":"Manual Installation","text":"<ul> <li>Clone the repo:   <pre><code>git clone https://github.com/Lusan-sapkota/smart-shell.git\ncd smart-shell\n</code></pre></li> <li>Set up a virtual environment:   <pre><code>python3 -m venv venv\nsource venv/bin/activate\npip install -e .\n</code></pre></li> <li>Set your API key:   <pre><code>export SMART_SHELL_API_KEY=your-api-key-here\n</code></pre></li> </ul>"},{"location":"development/#contributing","title":"Contributing","text":"<ul> <li>Please read CONTRIBUTING for guidelines.</li> <li>Issues and PRs are welcome!</li> </ul>"},{"location":"development/#project-structure","title":"Project Structure","text":"<ul> <li><code>smart_shell/</code>: Main source code</li> <li><code>docs/</code>: Documentation</li> <li><code>examples/</code>: Usage examples</li> <li><code>install.sh</code>: Installer script</li> <li><code>requirements.txt</code>, <code>pyproject.toml</code>: Dependencies</li> </ul> <p>See API Reference for code-level documentation.</p>"},{"location":"faq/","title":"FAQ","text":"<p>Q: What is Smart-Shell? A: An AI-powered terminal assistant that converts natural language to Bash/Zsh commands using Gemini models.</p> <p>Q: Is it safe to use? A: Yes, Smart-Shell includes robust safety checks to prevent dangerous commands.</p> <p>Q: How do I install it? A: Use the quick install command or see Installation.</p> <p>Q: How do I set my API key? A: Run <code>smart-shell setup</code> or set the <code>SMART_SHELL_API_KEY</code> environment variable.</p> <p>Q: Can I contribute? A: Absolutely! See Contributing.</p> <p>Q: Where can I get help? A: Open an issue on GitHub or check the Development Guide.</p>"},{"location":"features/","title":"Features","text":"<p>Smart-Shell offers a rich set of features to enhance your terminal experience:</p> <ul> <li>Interactive Mode: Continuous natural language to Bash/Zsh command conversion</li> <li>Safety Checks: Built-in protection against dangerous commands</li> <li>Multiple AI Models: Support for various Gemini models</li> <li>Command History: Track and recall past commands</li> <li>Secure API Key Management: Environment variables or config file storage</li> <li>Tab Completion: completion for all commands and options</li> <li>Desktop Integration: Launch from application menu</li> <li>Web Search Support: Smart-Shell is fully capable of web search as well</li> <li>Network Error Handling: Robust handling of connectivity issues</li> <li>Automatic Retries: Automatic retry mechanism for transient errors</li> <li>Dry Run Mode: Preview commands before execution</li> <li>Model Selection: Choose between Gemini models for different needs</li> <li>History Search: Quickly search and reuse previous commands</li> <li>Custom Configuration: Easily manage preferences and API keys</li> <li>Extensible: Designed for easy addition of new features</li> </ul> <p>See Usage for more details on how to use each feature.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#quick-installation-recommended","title":"Quick Installation (Recommended)","text":"<p>Run this command to install Smart-Shell system-wide:</p> <pre><code>curl -sSL https://raw.githubusercontent.com/Lusan-sapkota/smart-shell/main/install.sh | bash\n</code></pre> <p>**Please note: Run smart-shell setup command after this to setup api key and sudo password.</p> <p>After installation, use Smart-Shell from any terminal:</p> <pre><code>smart-shell\n</code></pre>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<p>For manual installation and development setup, see Development.</p>"},{"location":"safety/","title":"Safety","text":"<p>Smart-Shell includes a comprehensive safety system to protect users from potentially harmful commands.</p>"},{"location":"safety/#safety-levels","title":"Safety Levels","text":"<ul> <li>Safe \ud83d\udfe2: Commands that are considered safe to run</li> <li>Warning \ud83d\udfe1: Commands that might have unintended consequences (requires confirmation)</li> <li>Blocked \ud83d\udd34: Commands that are potentially harmful (will not be executed)</li> </ul>"},{"location":"safety/#safety-checks","title":"Safety Checks","text":"<ul> <li>Blocked Commands: Explicitly blocks dangerous commands (e.g., <code>rm -rf /</code>, fork bombs, disk formatting)</li> <li>Pattern Matching: Uses regex to identify risky command patterns (e.g., <code>sudo</code>, <code>rm -rf</code>)</li> <li>Path Analysis: Detects operations on sensitive system paths (e.g., <code>/etc/passwd</code>)</li> </ul> <p>For more details, see the Safety System Documentation.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#interactive-mode","title":"Interactive Mode","text":"<p>Start Smart-Shell in interactive mode:</p> <pre><code>smart-shell\n</code></pre> <p>Type natural language commands and Smart-Shell will convert them to Bash/Zsh. Exit with <code>exit</code>, <code>quit</code>, or <code>Ctrl+C</code>.</p>"},{"location":"usage/#one-off-commands","title":"One-off Commands","text":"<pre><code>smart-shell run \"list all pdf files in the current directory\"\nsmart-shell run \"delete all log files\" --dry-run\nsmart-shell run \"find large files\" --model gemini-2.5-flash\nsmart-shell run \"restart apache\" --yes\n</code></pre>"},{"location":"usage/#available-commands","title":"Available Commands","text":"<ul> <li><code>smart-shell</code> or <code>smart-shell run</code>: Convert natural language to Bash/Zsh commands</li> <li><code>smart-shell setup</code>: Configure your API key</li> <li><code>smart-shell version</code>: Display version information</li> <li><code>smart-shell history</code>: Show command history</li> </ul>"},{"location":"usage/#special-commands-interactive-mode","title":"Special Commands (Interactive Mode)","text":"<ul> <li><code>!history</code> - Show command history</li> <li><code>!clear</code> - Clear the screen</li> <li><code>!help</code> - Show help</li> <li><code>!model &lt;model-name&gt;</code> - Change the AI model</li> </ul>"},{"location":"usage/#options","title":"Options","text":"<ul> <li><code>--dry-run</code>, <code>-d</code>: Show command without executing</li> <li><code>--model</code>, <code>-m</code>: Specify model to use</li> <li><code>--interactive</code>, <code>-i</code>: Run in interactive mode</li> <li><code>--yes</code>, <code>-y</code>: Automatically confirm all prompts</li> </ul> <p>See Features for more details.</p>"}]}